/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Controleur.EquipeDouble;
import Controleur.Joueur;
import Controleur.Match;
import Models.EquipeDoubleDAO;
import Models.JoueurDAO;
import Models.MatchDAO;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

/**
 *
 * @author p1805797
 */
public class SaisirVainqueur extends javax.swing.JFrame {

    private Accueil app;
    private JoueurDAO joueurDAO = new JoueurDAO();
    private MatchDAO matchDAO=new MatchDAO();
    private EquipeDoubleDAO equipeDoubleDAO=new EquipeDoubleDAO();
    
    /**
     * Creates new form SaisirVainqueur
     */
    public SaisirVainqueur(Accueil acc) {
        initComponents();
        app = acc;
        DefaultComboBoxModel<String> aModelJoueurEquipe = new DefaultComboBoxModel();
        DefaultComboBoxModel<String> aModelMatch = new DefaultComboBoxModel();
        ArrayList<Match> listMatch = matchDAO.findTournoiSimple();
        ArrayList<Integer> listJoueur=new ArrayList();
        ArrayList<Match> listMatchEnlever=new ArrayList();
        if(listMatch.size()>0){
            int i=0;
            for(Match match : listMatch){
                Joueur joueur1=joueurDAO.find(match.getIdJoueur1());
                Joueur joueur2=joueurDAO.find(match.getIdJoueur2());
                if(joueur1.getIdTournoiSimple()!=joueur2.getIdTournoiSimple()){
                    listMatchEnlever.add(match);
                }
            }
            for(Match match:listMatchEnlever){
                listMatch.remove(match);
            }
            if(listMatch.size()>0){
                listJoueur.add(listMatch.get(0).getIdJoueur1());
                listJoueur.add(listMatch.get(0).getIdJoueur2());
                for(int idJoueur : listJoueur){
                    Joueur joueur=joueurDAO.find(idJoueur);
                    aModelJoueurEquipe.addElement(joueur.getNom()+"  "+joueur.getPrenom());
                }
                for(Match match : listMatch){
                    Joueur joueur1=joueurDAO.find(match.getIdJoueur1());
                    Joueur joueur2=joueurDAO.find(match.getIdJoueur2());
                    aModelMatch.addElement(match.getId()+" "+joueur1.getNom()+" - "+joueur2.getNom());
                }
            } else {
                aModelMatch.addElement("Aucun match disponible");
                aModelJoueurEquipe.addElement("Aucun joueur ou équipe disponible");
            }
        } else {
            aModelMatch.addElement("Aucun match disponible");
            aModelJoueurEquipe.addElement("Aucun joueur ou équipe disponible");
        }
        jComboBoxSelectJoueurEquipe.setModel(aModelJoueurEquipe);
        jComboBoxSelectMatch.setModel(aModelMatch);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonAccueil = new javax.swing.JButton();
        jButtonQuitterApp = new javax.swing.JButton();
        jComboBoxSelectMatch = new javax.swing.JComboBox<>();
        jComboBoxSelectJoueurEquipe = new javax.swing.JComboBox<>();
        jComboBoxSelectTournoi = new javax.swing.JComboBox<>();
        jToggleButtonValider = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButtonAccueil.setText("Accueil");
        jButtonAccueil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAccueilActionPerformed(evt);
            }
        });

        jButtonQuitterApp.setText("Quitter l'application");
        jButtonQuitterApp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonQuitterAppActionPerformed(evt);
            }
        });

        jComboBoxSelectMatch.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Match" }));
        jComboBoxSelectMatch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSelectMatchActionPerformed(evt);
            }
        });

        jComboBoxSelectJoueurEquipe.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Joueur vainqueur / Equipe vainqueur" }));

        jComboBoxSelectTournoi.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tournoi simple", "Tournoi double", "Qualification" }));
        jComboBoxSelectTournoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSelectTournoiActionPerformed(evt);
            }
        });

        jToggleButtonValider.setText("Valider");
        jToggleButtonValider.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonValiderActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButtonAccueil, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonQuitterApp, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jToggleButtonValider))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jComboBoxSelectJoueurEquipe, 0, 300, Short.MAX_VALUE)
                            .addComponent(jComboBoxSelectTournoi, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxSelectMatch, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 164, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonAccueil)
                .addGap(85, 85, 85)
                .addComponent(jComboBoxSelectTournoi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jComboBoxSelectMatch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jComboBoxSelectJoueurEquipe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 78, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonQuitterApp)
                    .addComponent(jToggleButtonValider))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonAccueilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAccueilActionPerformed
        this.dispose();
        app.setVisible(true);
    }//GEN-LAST:event_jButtonAccueilActionPerformed

    private void jButtonQuitterAppActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonQuitterAppActionPerformed
        this.dispose();
        app.dispose();
    }//GEN-LAST:event_jButtonQuitterAppActionPerformed

    private void jComboBoxSelectMatchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSelectMatchActionPerformed
        String tournoi=jComboBoxSelectTournoi.getSelectedItem().toString();
        if (tournoi.equals("Qualification") || tournoi.equals("Tournoi simple")){
            DefaultComboBoxModel<String> aModelJoueurEquipe = new DefaultComboBoxModel();
            ArrayList<Integer> listJoueur=new ArrayList();
            char[] noms=jComboBoxSelectMatch.getSelectedItem().toString().toCharArray();
            int i=0,idmatch;
            String idmatchstr="";
            Boolean temp=false;
            while(i<noms.length && !temp){
                if(noms[i]==' '){
                    temp=true;
                }
                i++;
            }
            i--;
            for(int j=0;j<i;j++){
                idmatchstr=idmatchstr+noms[j];
            }
            idmatch=Integer.parseInt(idmatchstr);
            Match match=matchDAO.find(idmatch);
            listJoueur.add(match.getIdJoueur1());
            listJoueur.add(match.getIdJoueur2());
            System.out.println(listJoueur);
            for(int idJoueur : listJoueur){
                Joueur joueur=joueurDAO.find(idJoueur);
                aModelJoueurEquipe.addElement(joueur.getNom()+"  "+joueur.getPrenom());
            }
            jComboBoxSelectJoueurEquipe.setModel(aModelJoueurEquipe);
        }
        if (tournoi.equals("Tournoi double")){
            DefaultComboBoxModel<String> aModelJoueurEquipe = new DefaultComboBoxModel();
            ArrayList<Integer> listEquipe=new ArrayList();
            char[] noms=jComboBoxSelectMatch.getSelectedItem().toString().toCharArray();
            int i=0,idmatch;
            String idmatchstr="";
            Boolean temp=false;
            while(i<noms.length && !temp){
                if(noms[i]==' '){
                    temp=true;
                }
                i++;
            }
            i--;
            for(int j=0;j<i;j++){
                idmatchstr=idmatchstr+noms[j];
            }
            idmatch=Integer.parseInt(idmatchstr);
            Match match=matchDAO.find(idmatch);
            listEquipe.add(match.getIdEquipe1());
            listEquipe.add(match.getIdEquipe2());
            for(int idEquipe : listEquipe){
                EquipeDouble equipeDouble=equipeDoubleDAO.find(idEquipe);
                Joueur joueur1=joueurDAO.find(equipeDouble.getIdJoueur1());
                Joueur joueur2=joueurDAO.find(equipeDouble.getIdJoueur2());
                aModelJoueurEquipe.addElement(joueur1.getNom()+"  "+joueur1.getPrenom()+", "+joueur2.getNom()+"  "+joueur2.getPrenom());
                }
            jComboBoxSelectJoueurEquipe.setModel(aModelJoueurEquipe);
        }
    }//GEN-LAST:event_jComboBoxSelectMatchActionPerformed

    private void jComboBoxSelectTournoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSelectTournoiActionPerformed
        if (jComboBoxSelectTournoi.getSelectedItem().equals("Tournoi simple")){
            DefaultComboBoxModel<String> aModelJoueurEquipe = new DefaultComboBoxModel();
            DefaultComboBoxModel<String> aModelMatch = new DefaultComboBoxModel();
            ArrayList<Match> listMatch = matchDAO.findTournoiSimple();
            ArrayList<Integer> listJoueur=new ArrayList();
            ArrayList<Integer> listIndiceMatchEnlever=new ArrayList();
            if(listMatch.size()>0){
                int i=0;
                for(Match match : listMatch){
                    Joueur joueur1=joueurDAO.find(match.getIdJoueur1());
                    Joueur joueur2=joueurDAO.find(match.getIdJoueur2());
                    if(joueur1.getIdTournoiSimple()!=joueur2.getIdTournoiSimple()){
                        listIndiceMatchEnlever.add(i);
                    }
                    i++;
                }
                for(Integer ind:listIndiceMatchEnlever){
                    listMatch.remove(listMatch.get(ind));
                }
                listJoueur.add(listMatch.get(0).getIdJoueur1());
                listJoueur.add(listMatch.get(0).getIdJoueur2());
                for(int idJoueur : listJoueur){
                    Joueur joueur=joueurDAO.find(idJoueur);
                    aModelJoueurEquipe.addElement(joueur.getNom()+"  "+joueur.getPrenom());
                }
                for(Match match : listMatch){
                    Joueur joueur1=joueurDAO.find(match.getIdJoueur1());
                    Joueur joueur2=joueurDAO.find(match.getIdJoueur2());
                    aModelMatch.addElement(match.getId()+" "+joueur1.getNom()+" - "+joueur2.getNom());
                }
            } else {
                aModelMatch.addElement("Aucun match disponible");
                aModelJoueurEquipe.addElement("Aucun joueur ou équipe disponible");
            }
            jComboBoxSelectJoueurEquipe.setModel(aModelJoueurEquipe);
            jComboBoxSelectMatch.setModel(aModelMatch);
        }
        if (jComboBoxSelectTournoi.getSelectedItem().equals("Tournoi double")){
            DefaultComboBoxModel<String> aModelJoueurEquipe = new DefaultComboBoxModel();
            DefaultComboBoxModel<String> aModelMatch = new DefaultComboBoxModel();
            ArrayList<Match> listMatch = matchDAO.findTournoiDouble();
            ArrayList<Integer> listEquipe=new ArrayList();
            ArrayList<Integer> listIndiceMatchEnlever=new ArrayList();
            if(listMatch.size()>0){
                int i=0;
                for(Match match : listMatch){
                    EquipeDouble equipeDouble1=equipeDoubleDAO.find(match.getIdEquipe1());
                    EquipeDouble equipeDouble2=equipeDoubleDAO.find(match.getIdEquipe2());
                    if(equipeDouble1.getIdTournoiDouble()!=equipeDouble2.getIdTournoiDouble()){
                        listIndiceMatchEnlever.add(i);
                    }
                    i++;
                }
                for(Integer ind:listIndiceMatchEnlever){
                    listMatch.remove(listMatch.get(ind));
                }
                listEquipe.add(listMatch.get(0).getIdEquipe1());
                listEquipe.add(listMatch.get(0).getIdEquipe2());
                for(int idEquipe : listEquipe){
                    EquipeDouble equipeDouble=equipeDoubleDAO.find(idEquipe);
                    Joueur joueur1=joueurDAO.find(equipeDouble.getIdJoueur1());
                    Joueur joueur2=joueurDAO.find(equipeDouble.getIdJoueur2());
                    aModelJoueurEquipe.addElement(joueur1.getNom()+"  "+joueur1.getPrenom()+", "+joueur2.getNom()+"  "+joueur2.getPrenom());
                }
                for(Match match : listMatch){
                    EquipeDouble equipeDouble1=equipeDoubleDAO.find(match.getIdEquipe1());
                    EquipeDouble equipeDouble2=equipeDoubleDAO.find(match.getIdEquipe2());
                    aModelMatch.addElement(match.getId()+" "+joueurDAO.find(equipeDouble1.getIdJoueur1()).getNom()+"  "+joueurDAO.find(equipeDouble1.getIdJoueur2()).getNom()+" - "+joueurDAO.find(equipeDouble2.getIdJoueur1()).getNom()+"  "+joueurDAO.find(equipeDouble2.getIdJoueur2()).getNom());
                }
            } else {
                aModelMatch.addElement("Aucun match disponible");
                aModelJoueurEquipe.addElement("Aucun joueur ou équipe disponible");
            }
            jComboBoxSelectJoueurEquipe.setModel(aModelJoueurEquipe);
            jComboBoxSelectMatch.setModel(aModelMatch);
        }
        if (jComboBoxSelectTournoi.getSelectedItem().equals("Qualification")){
            DefaultComboBoxModel<String> aModelJoueurEquipe = new DefaultComboBoxModel();
            DefaultComboBoxModel<String> aModelMatch = new DefaultComboBoxModel();
            ArrayList<Match> listMatch = matchDAO.findQualification();
            ArrayList<Integer> listJoueur=new ArrayList();
            ArrayList<Integer> listIndiceMatchEnlever=new ArrayList();
            if(listMatch.size()>0){
                int i=0;
                for(Match match : listMatch){
                    Joueur joueur1=joueurDAO.find(match.getIdJoueur1());
                    Joueur joueur2=joueurDAO.find(match.getIdJoueur2());
                    if(joueur1.getIdQualification()!=joueur2.getIdQualification()){
                        listIndiceMatchEnlever.add(i);
                    }
                    i++;
                }
                for(Integer ind:listIndiceMatchEnlever){
                    listMatch.remove(listMatch.get(ind));
                }
                listJoueur.add(listMatch.get(0).getIdJoueur1());
                listJoueur.add(listMatch.get(0).getIdJoueur2());
                for(int idJoueur : listJoueur){
                    Joueur joueur=joueurDAO.find(idJoueur);
                    aModelJoueurEquipe.addElement(joueur.getNom()+"  "+joueur.getPrenom());
                }
                for(Match match : listMatch){
                    Joueur joueur1=joueurDAO.find(match.getIdJoueur1());
                    Joueur joueur2=joueurDAO.find(match.getIdJoueur2());
                    aModelMatch.addElement(match.getId()+" "+joueur1.getNom()+" - "+joueur2.getNom());
                }
            } else {
                aModelMatch.addElement("Aucun match disponible");
                aModelJoueurEquipe.addElement("Aucun joueur ou équipe disponible");
            }
            jComboBoxSelectJoueurEquipe.setModel(aModelJoueurEquipe);
            jComboBoxSelectMatch.setModel(aModelMatch);
        }
    }//GEN-LAST:event_jComboBoxSelectTournoiActionPerformed

    private void jToggleButtonValiderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonValiderActionPerformed
        String tournoi=jComboBoxSelectTournoi.getSelectedItem().toString();
        if (tournoi.equals("Tournoi double")){
            char[] charEquipeDouble=jComboBoxSelectJoueurEquipe.getSelectedItem().toString().toCharArray();
            char[] cjoueur1=new char[100];
            char[] cjoueur2=new char[100];
            int i=0,j=0,k=0;
            while(charEquipeDouble[i]!=','){
                i++;
            }
            for(j=0;j<i;j++){
                cjoueur1[j]=charEquipeDouble[j];
            }
            for(j=i+2;j<charEquipeDouble.length;j++){
                cjoueur2[k]=charEquipeDouble[j];
                k++;
            }
            Joueur joueur1=getJoueur(cjoueur1);
            Joueur joueur2=getJoueur(cjoueur2);
            EquipeDouble equipeDouble=equipeDoubleDAO.findAvecIdJoueurs(joueur1.getId(),joueur2.getId());
            equipeDoubleDAO.updateIdTournoiDouble(equipeDouble.getId(), equipeDouble.getIdTournoiDouble()+1);
            JOptionPane.showMessageDialog(null, "L'équipe  "+joueur1.getNom()+", "+joueur2.getNom()+" a été ajouté comme vainqueur.");
            this.dispose();
            app.setVisible(true);
        }
        if (tournoi.equals("Qualification") || tournoi.equals("Tournoi simple")){
            char[] cjoueur=jComboBoxSelectJoueurEquipe.getSelectedItem().toString().toCharArray();
            Joueur joueur=getJoueur(cjoueur);
            if(tournoi.equals("Qualification")){
                joueurDAO.updateIdQualification(joueur.getId(), joueur.getIdQualification()+1);
            } else {
                joueurDAO.updateIdTournoiSimple(joueur.getId(), joueur.getIdTournoiSimple()+1);
            }
            JOptionPane.showMessageDialog(null, "Le joueur  "+joueur.getNom()+" "+joueur.getPrenom()+" a été ajouté comme vainqueur.");
            this.dispose();
            app.setVisible(true);
        }
    }//GEN-LAST:event_jToggleButtonValiderActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SaisirVainqueur.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SaisirVainqueur.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SaisirVainqueur.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SaisirVainqueur.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SaisirVainqueur(new Accueil()).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAccueil;
    private javax.swing.JButton jButtonQuitterApp;
    private javax.swing.JComboBox<String> jComboBoxSelectJoueurEquipe;
    private javax.swing.JComboBox<String> jComboBoxSelectMatch;
    private javax.swing.JComboBox<String> jComboBoxSelectTournoi;
    private javax.swing.JToggleButton jToggleButtonValider;
    // End of variables declaration//GEN-END:variables

    private Joueur getJoueur(char[] nomprenom){
        Boolean temp=true,temp2=true;
        int i=1;
        String nom="",prenom="";
        while(i<nomprenom.length && temp){
            if(nomprenom[i-1]==' ' && nomprenom[i]==' '){
                int j;
                for(j=0;j<i-1;j++){
                    nom=nom+nomprenom[j];
                }
                j=i+1;
                while(j<nomprenom.length && temp2){
                    if(nomprenom[j]==Character.MIN_VALUE && nomprenom[j+1]==Character.MIN_VALUE){
                        temp2=false;
                    } else {
                        prenom=prenom+nomprenom[j];
                    }
                    j++;
                }
                System.out.println(nom+" "+prenom);
                temp=false;
            }
            i++;
        }
        return joueurDAO.find(joueurDAO.findIdAvecNomPrenom(nom, prenom));
    }
}
